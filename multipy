#!/usr/bin/env python3
import os
from multipylib import node, runner, manager

# It is possible to use environment variables (those from the shell) to
# configure the main parameters of the program, but if these are not specified
# and neither --host or --port are present, these defaults are used instead.
MULTIPY_HOST = os.getenv('MULTIPY_HOST', '127.0.0.1')
MULTIPY_PORT = os.getenv('MULTIPY_PORT', 3000)
MULTIPY_AUTH = os.getenv('MULTIPY_AUTHKEY', 'theclusterkey')

if __name__ == '__main__':
    import argparse

    # Parser used to read command line arguments (CLI App framework)
    parser = argparse.ArgumentParser(description='Process tasks in cluster')
    parser.add_argument(
        '--host', dest='host', type=str, help='Manager address')
    parser.add_argument('--port', dest='port', type=int, help='Manager port')
    parser.add_argument(
        '--key', dest='authkey', type=str, help='Manager auth key')
    parser.set_defaults(
        host=MULTIPY_HOST, port=MULTIPY_PORT, authkey=MULTIPY_AUTH)

    # Add subcommands to ease the management of 'run', 'node' and 'manager'
    # subprograms, so that each has it's own command line arguments.
    subparsers = parser.add_subparsers(
        title='Subcommands',
        description='Mode of execution of multipy',
        help='are valid subcommands')

    # node parser (dispatchs start() on multipy/node.py file)
    parser_node = subparsers.add_parser('node')
    parser_node.add_argument(
        '--procs',
        type=int,
        nargs='?',
        default=os.cpu_count(),  # This may not be the allowed cores to use
        dest='procs',
        help='Number of processes to spawn in the node')
    parser_node.set_defaults(func=node.start)

    # manager parser (dispatchs start() on multipy/manager.py file)
    parser_manager = subparsers.add_parser('manager')
    parser_manager.add_argument(
        '--workers',
        type=int,
        nargs='?',
        default=1,
        dest='workers_count',
        help='# of worker nodes allowed to use for processing a single task.')
    parser_manager.set_defaults(func=manager.start)

    # runner parser (dispatchs start() on multipy/runner.py file)
    parser_run = subparsers.add_parser('run')
    parser_run.add_argument(
        'file',
        type=argparse.FileType('r'),
        help='Python file with main() to execute')
    parser_run.add_argument(
        'args',
        nargs=argparse.REMAINDER,
        help='Other arguments to pass to your program')
    parser_run.set_defaults(func=runner.start)

    # dispatch subcommands
    args = parser.parse_args()
    args.func(args)  # Call the function associated with the correct subcommand
